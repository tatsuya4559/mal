; vim: ft=scheme
(defmacro! defun!
  (fn* (fname args body)
    `(def! ~fname (fn* ~args ~body))))

(defun! not (x) (if x false true))
(defun! true? (x) (not (not x)))
(defun! false? (x) (not x))
(defun! nil? (x) (= x nil))

(defun! nth (lst n)
  (if (= n 0)
    (car lst)
    (nth (cdr lst) (- n 1))))

(defmacro! cond
  (fn* (& xs)
    (if (> (count xs) 0)
      (let* (clause (car xs))
        (list 'if (car clause) (if (> (count clause) 1) (nth clause 1) nil)
                               (cons 'cond (cdr xs)))))))

(defun! filter (f xs)
  (cond ((empty? xs) '())
        ((f (car xs)) (cons (car xs) (filter f (cdr xs))))
        (true (filter f (cdr xs)))))

(defun! map (f xs)
  (if (empty? xs)
    '()
    (cons (f (car xs)) (map f (cdr xs)))))

(defun! reduce (f accum xs)
  (if (empty? xs)
    accum
    (reduce f (f accum (car xs)) (cdr xs))))

(defmacro! and
  (fn* (& xs)
    (reduce (fn* (acc el) (list 'if acc el false)) true xs)))

(defmacro! or
  (fn* (& xs)
    (reduce (fn* (acc el) (list 'if acc true el)) false xs)))

(defun! flatten (xs)
  (cond ((empty? xs) '())
        ((not (list? xs)) (list xs))
        (true (concat (flatten (car xs)) (flatten (cdr xs))))))

(defun! apply (f & args)
  (eval (cons f (flatten args))))
